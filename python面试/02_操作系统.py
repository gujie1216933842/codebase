'''
1.select poll 和epoll
  三个都有io多路复用的机制
  io多路复用就是通过一种机制,一个进程可以监视多个描述符,一旦一个描述符就绪,就能够通知程序进行读写操作
  但是select poll 和epoll本质上都是同步io,也就是说读写过程是阻塞的,而异步io不需要自己读写,异步io的实现

  epoll并不一定比select好
  在高并发的情况下,连接活跃度不是很高,epoll比select好,web高并发网站
  在并发性不高,同时连接很活跃,select比epoll好,游戏开发


3.Redis原理
    性能极高 – Redis能支持超过 100K+ 每秒的读写频率。
    丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
    原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。
    丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。

4.乐观锁和悲观锁
  乐观锁:总是认为不会产生并发问题,每次去取数据的时候,总认为不会有其他线程对数据进行修改,因此不会上锁,
        但是在更新时会判断其他线程在这之前有没有对数据进行修改,一般会使用版本号机制控制

  版本号机制:在数据表中加上版本号version字段,表示数据被修改的次数,当数据被修改时,version值会加上1,
            当线程A更新数据时,在读取数据的同时,也会读取verison值,在提交更新时,若刚才读取到的version
            与当前数据库中的version值相等时才更新,否则重试更新操作,直到更新成功
            update table set x=x+1, version=version+1 where id=#{id} and version=#{version};
  悲观锁:总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），
         当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁


'''